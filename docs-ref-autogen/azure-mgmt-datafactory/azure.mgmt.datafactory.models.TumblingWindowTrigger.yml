### YamlMime:UniversalReference
api_name: []
items:
- children: []
  class: azure.mgmt.datafactory.models.TumblingWindowTrigger
  fullName: azure.mgmt.datafactory.models.TumblingWindowTrigger
  inheritance:
  - inheritance:
    - inheritance:
      - type: builtins.object
      type: msrest.serialization.Model
    type: azure.mgmt.datafactory.models.trigger.Trigger
  langs:
  - python
  module: azure.mgmt.datafactory.models
  name: TumblingWindowTrigger
  source:
    id: TumblingWindowTrigger
    path: azure-mgmt-datafactory\azure\mgmt\datafactory\models\tumbling_window_trigger.py
    remote:
      branch: master
      path: azure-mgmt-datafactory\azure\mgmt\datafactory\models\tumbling_window_trigger.py
      repo: https://github.com/Azure/azure-sdk-for-python.git
    startLine: 15
  summary: 'Trigger that schedules pipeline runs for all fixed time interval windows

    from a start time without gaps and also supports backfill scenarios (when

    start time is in the past).


    Variables are only populated by the server, and will be ignored when

    sending a request.

    '
  syntax:
    content: TumblingWindowTrigger(pipeline, frequency, interval, start_time, max_concurrency,
      additional_properties=None, description=None, end_time=None, delay=None, retry_policy=None)
    parameters:
    - description: 'Unmatched properties from the message are

        deserialized this collection

        '
      id: additional_properties
      type:
      - dict[str, object]
    - description: 'Trigger description.

        '
      id: description
      type:
      - str
    - description: 'Constant filled by server.

        '
      id: type
      type:
      - str
    - description: 'Pipeline for which runs are created when an event is

        fired for trigger window that is ready.

        '
      id: pipeline
      type:
      - azure.mgmt.datafactory.models.TriggerPipelineReference
    - description: 'The frequency of the time windows. Possible values

        include: ''Minute'', ''Hour''

        '
      id: frequency
      type:
      - str
      - azure.mgmt.datafactory.models.TumblingWindowFrequency
    - description: 'The interval of the time windows. The minimum interval

        allowed is 15 Minutes.

        '
      id: interval
      type:
      - int
    - description: 'The start time for the time period for the trigger

        during which events are fired for windows that are ready. Only UTC time is

        currently supported.

        '
      id: start_time
      type:
      - datetime
    - description: 'The end time for the time period for the trigger during

        which events are fired for windows that are ready. Only UTC time is

        currently supported.

        '
      id: end_time
      type:
      - datetime
    - description: 'Specifies how long the trigger waits past due time before

        triggering new run. It doesn''t alter window start and end time. The

        default is 0. Type: string (or Expression with resultType string),

        pattern: ((d+).)?(dd):(60|([0-5][0-9])):(60|([0-5][0-9])).

        '
      id: delay
      type:
      - object
    - description: 'The max number of parallel time windows (ready for

        execution) for which a new run is triggered.

        '
      id: max_concurrency
      type:
      - int
    - description: 'Retry policy that will be applied for failed pipeline

        runs.

        '
      id: retry_policy
      type:
      - azure.mgmt.datafactory.models.RetryPolicy
    variables:
    - description: 'Indicates if trigger is running or not. Updated when

        Start/Stop APIs are called on the Trigger. Possible values include:

        ''Started'', ''Stopped'', ''Disabled''

        '
      id: runtime_state
      type:
      - str
      - azure.mgmt.datafactory.models.TriggerRuntimeState
  type: class
  uid: azure.mgmt.datafactory.models.TumblingWindowTrigger
references:
- fullName: dict[str, object]
  name: dict[str, object]
  spec.python:
  - fullName: dict
    name: dict
    uid: dict
  - fullName: '['
    name: '['
  - fullName: str
    name: str
    uid: str
  - fullName: ', '
    name: ', '
  - fullName: object
    name: object
    uid: object
  - fullName: ']'
    name: ']'
  uid: dict[str, object]
