### YamlMime:UniversalReference
api_name: []
items:
- children:
  - azure.eventhub.client.EventHubClient.add_epoch_receiver
  - azure.eventhub.client.EventHubClient.add_receiver
  - azure.eventhub.client.EventHubClient.add_sender
  - azure.eventhub.client.EventHubClient.from_connection_string
  - azure.eventhub.client.EventHubClient.from_iothub_connection_string
  - azure.eventhub.client.EventHubClient.get_eventhub_info
  - azure.eventhub.client.EventHubClient.run
  - azure.eventhub.client.EventHubClient.stop
  class: azure.eventhub.client.EventHubClient
  fullName: azure.eventhub.client.EventHubClient
  inheritance:
  - type: builtins.object
  langs:
  - python
  module: azure.eventhub.client
  name: EventHubClient
  source:
    id: EventHubClient
    path: azure\eventhub\client.py
    remote:
      branch: master
      path: azure\eventhub\client.py
      repo: https://github.com/Azure/azure-event-hubs-python.git
    startLine: 86
  summary: 'The EventHubClient class defines a high level interface for sending

    events to and receiving events from the Azure Event Hubs service.









    '
  syntax:
    content: EventHubClient(address, username=None, password=None, debug=False)
  type: class
  uid: azure.eventhub.client.EventHubClient
- class: azure.eventhub.client.EventHubClient
  fullName: azure.eventhub.client.EventHubClient.add_epoch_receiver
  langs:
  - python
  module: azure.eventhub.client
  name: add_epoch_receiver
  source:
    id: add_epoch_receiver
    path: azure\eventhub\client.py
    remote:
      branch: master
      path: azure\eventhub\client.py
      repo: https://github.com/Azure/azure-event-hubs-python.git
    startLine: 339
  summary: 'Add a receiver to the client with an epoch value. Only a single epoch
    receiver

    can connect to a partition at any given time - additional epoch receivers must
    have

    a higher epoch value or they will be rejected. If a 2nd epoch receiver has

    connected, the first will be closed.

    '
  syntax:
    content: add_epoch_receiver(consumer_group, partition, epoch, prefetch=300, operation=None)
    parameters:
    - description: 'The name of the consumer group.

        '
      id: consumer_group
      type:
      - str
    - description: 'The ID of the partition.

        '
      id: partition
      type:
      - str
    - description: 'The epoch value for the receiver.

        '
      id: epoch
      type:
      - int
    - defaultValue: '300'
      description: 'The message prefetch count of the receiver. Default is 300.

        '
      id: prefetch
      type:
      - int
    - defaultValue: None
      id: operation
    return:
      type:
      - azure.eventhub.receiver.Receiver
  type: method
  uid: azure.eventhub.client.EventHubClient.add_epoch_receiver
- class: azure.eventhub.client.EventHubClient
  fullName: azure.eventhub.client.EventHubClient.add_receiver
  langs:
  - python
  module: azure.eventhub.client
  name: add_receiver
  source:
    id: add_receiver
    path: azure\eventhub\client.py
    remote:
      branch: master
      path: azure\eventhub\client.py
      repo: https://github.com/Azure/azure-event-hubs-python.git
    startLine: 312
  summary: 'Add a receiver to the client for a particular consumer group and partition.

    '
  syntax:
    content: add_receiver(consumer_group, partition, offset=None, prefetch=300, operation=None)
    parameters:
    - description: 'The name of the consumer group.

        '
      id: consumer_group
      type:
      - str
    - description: 'The ID of the partition.

        '
      id: partition
      type:
      - str
    - defaultValue: None
      description: 'The offset from which to start receiving.

        '
      id: offset
      type:
      - azure.eventhub.common.Offset
    - defaultValue: '300'
      description: 'The message prefetch count of the receiver. Default is 300.

        '
      id: prefetch
      type:
      - int
    - defaultValue: None
      id: operation
    return:
      type:
      - azure.eventhub.receiver.Receiver
  type: method
  uid: azure.eventhub.client.EventHubClient.add_receiver
- class: azure.eventhub.client.EventHubClient
  fullName: azure.eventhub.client.EventHubClient.add_sender
  langs:
  - python
  module: azure.eventhub.client
  name: add_sender
  source:
    id: add_sender
    path: azure\eventhub\client.py
    remote:
      branch: master
      path: azure\eventhub\client.py
      repo: https://github.com/Azure/azure-event-hubs-python.git
    startLine: 366
  summary: 'Add a sender to the client to send ~azure.eventhub.common.EventData object

    to an EventHub.

    '
  syntax:
    content: add_sender(partition=None, operation=None)
    parameters:
    - defaultValue: None
      description: 'Optionally specify a particular partition to send to.

        If omitted, the events will be distributed to available partitions via

        round-robin.

        '
      id: partition
    - defaultValue: None
      id: operation
    return:
      type:
      - azure.eventhub.sender.Sender
  type: method
  uid: azure.eventhub.client.EventHubClient.add_sender
- class: azure.eventhub.client.EventHubClient
  fullName: azure.eventhub.client.EventHubClient.from_connection_string
  langs:
  - python
  module: azure.eventhub.client
  name: from_connection_string
  source:
    id: from_connection_string
    path: azure\eventhub\client.py
    remote:
      branch: master
      path: azure\eventhub\client.py
      repo: https://github.com/Azure/azure-event-hubs-python.git
    startLine: 127
  summary: 'Create an EventHubClient from a connection string.

    '
  syntax:
    content: from_connection_string(conn_str, eventhub=None, **kwargs)
    parameters:
    - description: 'The connection string.

        '
      id: conn_str
      type:
      - str
    - description: 'The name of the EventHub, if the EntityName is

        not included in the connection string.

        '
      id: eventhub
    - defaultValue: None
      id: eventhub
  type: method
  uid: azure.eventhub.client.EventHubClient.from_connection_string
- class: azure.eventhub.client.EventHubClient
  fullName: azure.eventhub.client.EventHubClient.from_iothub_connection_string
  langs:
  - python
  module: azure.eventhub.client
  name: from_iothub_connection_string
  source:
    id: from_iothub_connection_string
    path: azure\eventhub\client.py
    remote:
      branch: master
      path: azure\eventhub\client.py
      repo: https://github.com/Azure/azure-event-hubs-python.git
    startLine: 142
  syntax:
    content: from_iothub_connection_string(conn_str, **kwargs)
    parameters:
    - id: cls
    - id: conn_str
  type: method
  uid: azure.eventhub.client.EventHubClient.from_iothub_connection_string
- class: azure.eventhub.client.EventHubClient
  fullName: azure.eventhub.client.EventHubClient.get_eventhub_info
  langs:
  - python
  module: azure.eventhub.client
  name: get_eventhub_info
  source:
    id: get_eventhub_info
    path: azure\eventhub\client.py
    remote:
      branch: master
      path: azure\eventhub\client.py
      repo: https://github.com/Azure/azure-event-hubs-python.git
    startLine: 273
  summary: "Get details on the specified EventHub.\nKeys in the details dictionary\
    \ include:\n\n\n   -'name'\n   -'type'\n   -'created_at'\n   -'partition_count'\n\
    \   -'partition_ids'\n"
  syntax:
    content: get_eventhub_info()
    parameters: []
    return:
      type:
      - dict
  type: method
  uid: azure.eventhub.client.EventHubClient.get_eventhub_info
- class: azure.eventhub.client.EventHubClient
  fullName: azure.eventhub.client.EventHubClient.run
  langs:
  - python
  module: azure.eventhub.client
  name: run
  source:
    id: run
    path: azure\eventhub\client.py
    remote:
      branch: master
      path: azure\eventhub\client.py
      repo: https://github.com/Azure/azure-event-hubs-python.git
    startLine: 231
  summary: 'Run the EventHubClient in blocking mode.

    Opens the connection and starts running all Sender/Receiver clients.

    Returns a list of the start up results. For a succcesful client start the

    result will be *None*, otherwise the exception raised.

    If all clients failed to start, then run will fail, shut down the connection

    and raise an exception.

    If at least one client starts up successfully the run command will succeed.

    '
  syntax:
    content: run()
    parameters: []
    return:
      type:
      - list[azure.eventhub.common.EventHubError]
  type: method
  uid: azure.eventhub.client.EventHubClient.run
- class: azure.eventhub.client.EventHubClient
  fullName: azure.eventhub.client.EventHubClient.stop
  langs:
  - python
  module: azure.eventhub.client
  name: stop
  source:
    id: stop
    path: azure\eventhub\client.py
    remote:
      branch: master
      path: azure\eventhub\client.py
      repo: https://github.com/Azure/azure-event-hubs-python.git
    startLine: 264
  summary: 'Stop the EventHubClient and all its Sender/Receiver clients.

    '
  syntax:
    content: stop()
    parameters: []
  type: method
  uid: azure.eventhub.client.EventHubClient.stop
references:
- fullName: azure.eventhub.client.EventHubClient.add_epoch_receiver
  isExternal: false
  name: add_epoch_receiver
  parent: azure.eventhub.client.EventHubClient
  uid: azure.eventhub.client.EventHubClient.add_epoch_receiver
- fullName: azure.eventhub.client.EventHubClient.add_receiver
  isExternal: false
  name: add_receiver
  parent: azure.eventhub.client.EventHubClient
  uid: azure.eventhub.client.EventHubClient.add_receiver
- fullName: azure.eventhub.client.EventHubClient.add_sender
  isExternal: false
  name: add_sender
  parent: azure.eventhub.client.EventHubClient
  uid: azure.eventhub.client.EventHubClient.add_sender
- fullName: azure.eventhub.client.EventHubClient.from_connection_string
  isExternal: false
  name: from_connection_string
  parent: azure.eventhub.client.EventHubClient
  uid: azure.eventhub.client.EventHubClient.from_connection_string
- fullName: azure.eventhub.client.EventHubClient.from_iothub_connection_string
  isExternal: false
  name: from_iothub_connection_string
  parent: azure.eventhub.client.EventHubClient
  uid: azure.eventhub.client.EventHubClient.from_iothub_connection_string
- fullName: azure.eventhub.client.EventHubClient.get_eventhub_info
  isExternal: false
  name: get_eventhub_info
  parent: azure.eventhub.client.EventHubClient
  uid: azure.eventhub.client.EventHubClient.get_eventhub_info
- fullName: azure.eventhub.client.EventHubClient.run
  isExternal: false
  name: run
  parent: azure.eventhub.client.EventHubClient
  uid: azure.eventhub.client.EventHubClient.run
- fullName: azure.eventhub.client.EventHubClient.stop
  isExternal: false
  name: stop
  parent: azure.eventhub.client.EventHubClient
  uid: azure.eventhub.client.EventHubClient.stop
- fullName: list[azure.eventhub.common.EventHubError]
  name: list[EventHubError]
  spec.python:
  - fullName: list
    name: list
    uid: list
  - fullName: '['
    name: '['
  - fullName: azure.eventhub.common.EventHubError
    name: EventHubError
    uid: azure.eventhub.common.EventHubError
  - fullName: ']'
    name: ']'
  uid: list[azure.eventhub.common.EventHubError]
