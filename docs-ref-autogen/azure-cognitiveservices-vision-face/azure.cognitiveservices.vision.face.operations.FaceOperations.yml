### YamlMime:UniversalReference
api_name: []
items:
- children:
  - azure.cognitiveservices.vision.face.operations.FaceOperations.detect_with_stream
  - azure.cognitiveservices.vision.face.operations.FaceOperations.detect_with_url
  - azure.cognitiveservices.vision.face.operations.FaceOperations.find_similar
  - azure.cognitiveservices.vision.face.operations.FaceOperations.group
  - azure.cognitiveservices.vision.face.operations.FaceOperations.identify
  - azure.cognitiveservices.vision.face.operations.FaceOperations.verify_face_to_face
  - azure.cognitiveservices.vision.face.operations.FaceOperations.verify_face_to_person
  - azure.cognitiveservices.vision.face.operations.FaceOperations.models
  class: azure.cognitiveservices.vision.face.operations.FaceOperations
  fullName: azure.cognitiveservices.vision.face.operations.FaceOperations
  inheritance:
  - type: builtins.object
  langs:
  - python
  module: azure.cognitiveservices.vision.face.operations
  name: FaceOperations
  source:
    id: FaceOperations
    path: azure-cognitiveservices-vision-face\azure\cognitiveservices\vision\face\operations\face_operations.py
    remote:
      branch: master
      path: azure-cognitiveservices-vision-face\azure\cognitiveservices\vision\face\operations\face_operations.py
      repo: https://github.com/Azure/azure-sdk-for-python.git
    startLine: 17
  summary: 'FaceOperations operations.









    '
  syntax:
    content: FaceOperations(client, config, serializer, deserializer)
    parameters:
    - description: 'Client for service requests.

        '
      id: client
    - description: 'Configuration of service client.

        '
      id: config
    - description: 'An object model serializer.

        '
      id: serializer
    - description: 'An object model deserializer.

        '
      id: deserializer
  type: class
  uid: azure.cognitiveservices.vision.face.operations.FaceOperations
- class: azure.cognitiveservices.vision.face.operations.FaceOperations
  exceptions:
  - type: azure.cognitiveservices.vision.face.models.APIErrorException
  fullName: azure.cognitiveservices.vision.face.operations.FaceOperations.detect_with_stream
  langs:
  - python
  module: azure.cognitiveservices.vision.face.operations
  name: detect_with_stream
  source:
    id: detect_with_stream
    path: azure-cognitiveservices-vision-face\azure\cognitiveservices\vision\face\operations\face_operations.py
    remote:
      branch: master
      path: azure-cognitiveservices-vision-face\azure\cognitiveservices\vision\face\operations\face_operations.py
      repo: https://github.com/Azure/azure-sdk-for-python.git
    startLine: 444
  summary: 'Detect human faces in an image and returns face locations, and

    optionally with faceIds, landmarks, and attributes.

    '
  syntax:
    content: detect_with_stream(image, return_face_id=True, return_face_landmarks=False,
      return_face_attributes=None, custom_headers=None, raw=False, callback=None,
      **operation_config)
    parameters:
    - description: 'An image stream.

        '
      id: image
      type:
      - Generator
    - defaultValue: 'True'
      description: 'A value indicating whether the operation should

        return faceIds of detected faces.

        '
      id: return_face_id
      type:
      - bool
    - defaultValue: 'False'
      description: 'A value indicating whether the operation

        should return landmarks of the detected faces.

        '
      id: return_face_landmarks
      type:
      - bool
    - defaultValue: None
      description: 'Analyze and return the one or more

        specified face attributes in the comma-separated string like

        "returnFaceAttributes=age,gender". Supported face attributes include

        age, gender, headPose, smile, facialHair, glasses and emotion. Note

        that each face attribute analysis has additional computational and

        time cost.

        '
      id: return_face_attributes
      type:
      - list[str
      - azure.cognitiveservices.vision.face.models.FaceAttributeType]
    - defaultValue: None
      description: 'headers that will be added to the request

        '
      id: custom_headers
      type:
      - dict
    - defaultValue: 'False'
      description: 'returns the direct response alongside the

        deserialized response

        '
      id: raw
      type:
      - bool
    - defaultValue: None
      description: 'When specified, will be called with each chunk of

        data that is streamed. The callback should take two arguments, the

        bytes of the current chunk of data and the response object. If the

        data is uploading, response will be None.

        '
      id: callback
      type:
      - Callable[Bytes, response=None]
    - description: '*Operation configuration

        overrides*.

        '
      id: operation_config
    return:
      description: 'list or ClientRawResponse if raw=true

        '
      type:
      - list[azure.cognitiveservices.vision.face.models.DetectedFace]
      - msrest.pipeline.ClientRawResponse
  type: method
  uid: azure.cognitiveservices.vision.face.operations.FaceOperations.detect_with_stream
- class: azure.cognitiveservices.vision.face.operations.FaceOperations
  exceptions:
  - type: azure.cognitiveservices.vision.face.models.APIErrorException
  fullName: azure.cognitiveservices.vision.face.operations.FaceOperations.detect_with_url
  langs:
  - python
  module: azure.cognitiveservices.vision.face.operations
  name: detect_with_url
  source:
    id: detect_with_url
    path: azure-cognitiveservices-vision-face\azure\cognitiveservices\vision\face\operations\face_operations.py
    remote:
      branch: master
      path: azure-cognitiveservices-vision-face\azure\cognitiveservices\vision\face\operations\face_operations.py
      repo: https://github.com/Azure/azure-sdk-for-python.git
    startLine: 301
  summary: 'Detect human faces in an image and returns face locations, and

    optionally with faceIds, landmarks, and attributes.

    '
  syntax:
    content: detect_with_url(url, return_face_id=True, return_face_landmarks=False,
      return_face_attributes=None, custom_headers=None, raw=False, **operation_config)
    parameters:
    - description: ''
      id: url
      type:
      - str
    - defaultValue: 'True'
      description: 'A value indicating whether the operation should

        return faceIds of detected faces.

        '
      id: return_face_id
      type:
      - bool
    - defaultValue: 'False'
      description: 'A value indicating whether the operation

        should return landmarks of the detected faces.

        '
      id: return_face_landmarks
      type:
      - bool
    - defaultValue: None
      description: 'Analyze and return the one or more

        specified face attributes in the comma-separated string like

        "returnFaceAttributes=age,gender". Supported face attributes include

        age, gender, headPose, smile, facialHair, glasses and emotion. Note

        that each face attribute analysis has additional computational and

        time cost.

        '
      id: return_face_attributes
      type:
      - list[str
      - azure.cognitiveservices.vision.face.models.FaceAttributeType]
    - defaultValue: None
      description: 'headers that will be added to the request

        '
      id: custom_headers
      type:
      - dict
    - defaultValue: 'False'
      description: 'returns the direct response alongside the

        deserialized response

        '
      id: raw
      type:
      - bool
    - description: '*Operation configuration

        overrides*.

        '
      id: operation_config
    return:
      description: 'list or ClientRawResponse if raw=true

        '
      type:
      - list[azure.cognitiveservices.vision.face.models.DetectedFace]
      - msrest.pipeline.ClientRawResponse
  type: method
  uid: azure.cognitiveservices.vision.face.operations.FaceOperations.detect_with_url
- class: azure.cognitiveservices.vision.face.operations.FaceOperations
  exceptions:
  - type: azure.cognitiveservices.vision.face.models.APIErrorException
  fullName: azure.cognitiveservices.vision.face.operations.FaceOperations.find_similar
  langs:
  - python
  module: azure.cognitiveservices.vision.face.operations
  name: find_similar
  source:
    id: find_similar
    path: azure-cognitiveservices-vision-face\azure\cognitiveservices\vision\face\operations\face_operations.py
    remote:
      branch: master
      path: azure-cognitiveservices-vision-face\azure\cognitiveservices\vision\face\operations\face_operations.py
      repo: https://github.com/Azure/azure-sdk-for-python.git
    startLine: 36
  summary: 'Given query face''s faceId, find the similar-looking faces from a faceId

    array or a faceListId.

    '
  syntax:
    content: find_similar(face_id, face_list_id=None, face_ids=None, max_num_of_candidates_returned=20,
      mode='matchPerson', custom_headers=None, raw=False, **operation_config)
    parameters:
    - description: 'FaceId of the query face. User needs to call Face -

        Detect first to get a valid faceId. Note that this faceId is not

        persisted and will expire 24 hours after the detection call

        '
      id: face_id
      type:
      - str
    - defaultValue: None
      description: 'An existing user-specified unique candidate face

        list, created in Face List - Create a Face List. Face list contains a

        set of persistedFaceIds which are persisted and will never expire.

        Parameter faceListId and faceIds should not be provided at the same

        time

        '
      id: face_list_id
      type:
      - str
    - defaultValue: None
      description: 'An array of candidate faceIds. All of them are

        created by Face - Detect and the faceIds will expire 24 hours after

        the detection call.

        '
      id: face_ids
      type:
      - list[str]
    - defaultValue: '20'
      description: 'The number of top similar faces

        returned. The valid range is [1, 1000].

        '
      id: max_num_of_candidates_returned
      type:
      - int
    - defaultValue: matchPerson
      description: 'Similar face searching mode. It can be "matchPerson" or

        "matchFace". Possible values include: ''matchPerson'', ''matchFace''

        '
      id: mode
      type:
      - str
      - azure.cognitiveservices.vision.face.models.FindSimilarMatchMode
    - defaultValue: None
      description: 'headers that will be added to the request

        '
      id: custom_headers
      type:
      - dict
    - defaultValue: 'False'
      description: 'returns the direct response alongside the

        deserialized response

        '
      id: raw
      type:
      - bool
    - description: '*Operation configuration

        overrides*.

        '
      id: operation_config
    return:
      description: 'list or ClientRawResponse if raw=true

        '
      type:
      - list[azure.cognitiveservices.vision.face.models.SimilarFace]
      - msrest.pipeline.ClientRawResponse
  type: method
  uid: azure.cognitiveservices.vision.face.operations.FaceOperations.find_similar
- class: azure.cognitiveservices.vision.face.operations.FaceOperations
  exceptions:
  - type: azure.cognitiveservices.vision.face.models.APIErrorException
  fullName: azure.cognitiveservices.vision.face.operations.FaceOperations.group
  langs:
  - python
  module: azure.cognitiveservices.vision.face.operations
  name: group
  source:
    id: group
    path: azure-cognitiveservices-vision-face\azure\cognitiveservices\vision\face\operations\face_operations.py
    remote:
      branch: master
      path: azure-cognitiveservices-vision-face\azure\cognitiveservices\vision\face\operations\face_operations.py
      repo: https://github.com/Azure/azure-sdk-for-python.git
    startLine: 113
  summary: 'Divide candidate faces into groups based on face similarity.

    '
  syntax:
    content: group(face_ids, custom_headers=None, raw=False, **operation_config)
    parameters:
    - description: 'Array of candidate faceId created by Face - Detect.

        The maximum is 1000 faces

        '
      id: face_ids
      type:
      - list[str]
    - defaultValue: None
      description: 'headers that will be added to the request

        '
      id: custom_headers
      type:
      - dict
    - defaultValue: 'False'
      description: 'returns the direct response alongside the

        deserialized response

        '
      id: raw
      type:
      - bool
    - description: '*Operation configuration

        overrides*.

        '
      id: operation_config
    return:
      description: 'GroupResult or ClientRawResponse if raw=true

        '
      type:
      - azure.cognitiveservices.vision.face.models.GroupResult
      - msrest.pipeline.ClientRawResponse
  type: method
  uid: azure.cognitiveservices.vision.face.operations.FaceOperations.group
- class: azure.cognitiveservices.vision.face.operations.FaceOperations
  exceptions:
  - type: azure.cognitiveservices.vision.face.models.APIErrorException
  fullName: azure.cognitiveservices.vision.face.operations.FaceOperations.identify
  langs:
  - python
  module: azure.cognitiveservices.vision.face.operations
  name: identify
  source:
    id: identify
    path: azure-cognitiveservices-vision-face\azure\cognitiveservices\vision\face\operations\face_operations.py
    remote:
      branch: master
      path: azure-cognitiveservices-vision-face\azure\cognitiveservices\vision\face\operations\face_operations.py
      repo: https://github.com/Azure/azure-sdk-for-python.git
    startLine: 171
  summary: 'Identify unknown faces from a person group.

    '
  syntax:
    content: identify(person_group_id, face_ids, max_num_of_candidates_returned=1,
      confidence_threshold=None, custom_headers=None, raw=False, **operation_config)
    parameters:
    - description: 'PersonGroupId of the target person group,

        created by PersonGroups.Create

        '
      id: person_group_id
      type:
      - str
    - description: 'Array of query faces faceIds, created by the Face -

        Detect. Each of the faces are identified independently. The valid

        number of faceIds is between [1, 10].

        '
      id: face_ids
      type:
      - list[str]
    - defaultValue: '1'
      description: 'The range of

        maxNumOfCandidatesReturned is between 1 and 5 (default is 1).

        '
      id: max_num_of_candidates_returned
      type:
      - int
    - defaultValue: None
      description: 'Confidence threshold of identification,

        used to judge whether one face belong to one person. The range of

        confidenceThreshold is [0, 1] (default specified by algorithm).

        '
      id: confidence_threshold
      type:
      - float
    - defaultValue: None
      description: 'headers that will be added to the request

        '
      id: custom_headers
      type:
      - dict
    - defaultValue: 'False'
      description: 'returns the direct response alongside the

        deserialized response

        '
      id: raw
      type:
      - bool
    - description: '*Operation configuration

        overrides*.

        '
      id: operation_config
    return:
      description: 'list or ClientRawResponse if raw=true

        '
      type:
      - list[azure.cognitiveservices.vision.face.models.IdentifyResult]
      - msrest.pipeline.ClientRawResponse
  type: method
  uid: azure.cognitiveservices.vision.face.operations.FaceOperations.identify
- class: azure.cognitiveservices.vision.face.operations.FaceOperations
  exceptions:
  - type: azure.cognitiveservices.vision.face.models.APIErrorException
  fullName: azure.cognitiveservices.vision.face.operations.FaceOperations.verify_face_to_face
  langs:
  - python
  module: azure.cognitiveservices.vision.face.operations
  name: verify_face_to_face
  source:
    id: verify_face_to_face
    path: azure-cognitiveservices-vision-face\azure\cognitiveservices\vision\face\operations\face_operations.py
    remote:
      branch: master
      path: azure-cognitiveservices-vision-face\azure\cognitiveservices\vision\face\operations\face_operations.py
      repo: https://github.com/Azure/azure-sdk-for-python.git
    startLine: 241
  summary: 'Verify whether two faces belong to a same person or whether one face

    belongs to a person.

    '
  syntax:
    content: verify_face_to_face(face_id1, face_id2, custom_headers=None, raw=False,
      **operation_config)
    parameters:
    - description: 'FaceId of the first face, comes from Face - Detect

        '
      id: face_id1
      type:
      - str
    - description: 'FaceId of the second face, comes from Face - Detect

        '
      id: face_id2
      type:
      - str
    - defaultValue: None
      description: 'headers that will be added to the request

        '
      id: custom_headers
      type:
      - dict
    - defaultValue: 'False'
      description: 'returns the direct response alongside the

        deserialized response

        '
      id: raw
      type:
      - bool
    - description: '*Operation configuration

        overrides*.

        '
      id: operation_config
    return:
      description: 'VerifyResult or ClientRawResponse if raw=true

        '
      type:
      - azure.cognitiveservices.vision.face.models.VerifyResult
      - msrest.pipeline.ClientRawResponse
  type: method
  uid: azure.cognitiveservices.vision.face.operations.FaceOperations.verify_face_to_face
- class: azure.cognitiveservices.vision.face.operations.FaceOperations
  exceptions:
  - type: azure.cognitiveservices.vision.face.models.APIErrorException
  fullName: azure.cognitiveservices.vision.face.operations.FaceOperations.verify_face_to_person
  langs:
  - python
  module: azure.cognitiveservices.vision.face.operations
  name: verify_face_to_person
  source:
    id: verify_face_to_person
    path: azure-cognitiveservices-vision-face\azure\cognitiveservices\vision\face\operations\face_operations.py
    remote:
      branch: master
      path: azure-cognitiveservices-vision-face\azure\cognitiveservices\vision\face\operations\face_operations.py
      repo: https://github.com/Azure/azure-sdk-for-python.git
    startLine: 379
  summary: 'Verify whether two faces belong to a same person. Compares a face Id

    with a Person Id.

    '
  syntax:
    content: verify_face_to_person(face_id, person_group_id, person_id, custom_headers=None,
      raw=False, **operation_config)
    parameters:
    - description: 'FaceId the face, comes from Face - Detect

        '
      id: face_id
      type:
      - str
    - description: 'Using existing personGroupId and personId for

        fast loading a specified person. personGroupId is created in Person

        Groups.Create.

        '
      id: person_group_id
      type:
      - str
    - description: 'Specify a certain person in a person group. personId

        is created in Persons.Create.

        '
      id: person_id
      type:
      - str
    - defaultValue: None
      description: 'headers that will be added to the request

        '
      id: custom_headers
      type:
      - dict
    - defaultValue: 'False'
      description: 'returns the direct response alongside the

        deserialized response

        '
      id: raw
      type:
      - bool
    - description: '*Operation configuration

        overrides*.

        '
      id: operation_config
    return:
      description: 'VerifyResult or ClientRawResponse if raw=true

        '
      type:
      - azure.cognitiveservices.vision.face.models.VerifyResult
      - msrest.pipeline.ClientRawResponse
  type: method
  uid: azure.cognitiveservices.vision.face.operations.FaceOperations.verify_face_to_person
- class: azure.cognitiveservices.vision.face.operations.FaceOperations
  fullName: azure.cognitiveservices.vision.face.operations.FaceOperations.models
  langs:
  - python
  module: azure.cognitiveservices.vision.face.operations
  name: models
  syntax:
    content: models = <module 'azure.cognitiveservices.vision.face.models' from 'c:\\program
      files (x86)\\microsoft visual studio\\shared\\python36_64\\lib\\site-packages\\azure\\cognitiveservices\\vision\\face\\models\\__init__.py'>
  type: attribute
  uid: azure.cognitiveservices.vision.face.operations.FaceOperations.models
references:
- fullName: azure.cognitiveservices.vision.face.operations.FaceOperations.detect_with_stream
  isExternal: false
  name: detect_with_stream
  parent: azure.cognitiveservices.vision.face.operations.FaceOperations
  uid: azure.cognitiveservices.vision.face.operations.FaceOperations.detect_with_stream
- fullName: azure.cognitiveservices.vision.face.operations.FaceOperations.detect_with_url
  isExternal: false
  name: detect_with_url
  parent: azure.cognitiveservices.vision.face.operations.FaceOperations
  uid: azure.cognitiveservices.vision.face.operations.FaceOperations.detect_with_url
- fullName: azure.cognitiveservices.vision.face.operations.FaceOperations.find_similar
  isExternal: false
  name: find_similar
  parent: azure.cognitiveservices.vision.face.operations.FaceOperations
  uid: azure.cognitiveservices.vision.face.operations.FaceOperations.find_similar
- fullName: azure.cognitiveservices.vision.face.operations.FaceOperations.group
  isExternal: false
  name: group
  parent: azure.cognitiveservices.vision.face.operations.FaceOperations
  uid: azure.cognitiveservices.vision.face.operations.FaceOperations.group
- fullName: azure.cognitiveservices.vision.face.operations.FaceOperations.identify
  isExternal: false
  name: identify
  parent: azure.cognitiveservices.vision.face.operations.FaceOperations
  uid: azure.cognitiveservices.vision.face.operations.FaceOperations.identify
- fullName: azure.cognitiveservices.vision.face.operations.FaceOperations.verify_face_to_face
  isExternal: false
  name: verify_face_to_face
  parent: azure.cognitiveservices.vision.face.operations.FaceOperations
  uid: azure.cognitiveservices.vision.face.operations.FaceOperations.verify_face_to_face
- fullName: azure.cognitiveservices.vision.face.operations.FaceOperations.verify_face_to_person
  isExternal: false
  name: verify_face_to_person
  parent: azure.cognitiveservices.vision.face.operations.FaceOperations
  uid: azure.cognitiveservices.vision.face.operations.FaceOperations.verify_face_to_person
- fullName: azure.cognitiveservices.vision.face.operations.FaceOperations.models
  isExternal: false
  name: models
  parent: azure.cognitiveservices.vision.face.operations.FaceOperations
  uid: azure.cognitiveservices.vision.face.operations.FaceOperations.models
- fullName: list[str
  name: list[str
  spec.python:
  - fullName: list
    name: list
    uid: list
  - fullName: '['
    name: '['
  - fullName: str
    name: str
    uid: str
  uid: list[str
- fullName: azure.cognitiveservices.vision.face.models.FaceAttributeType]
  name: FaceAttributeType]
  spec.python:
  - fullName: azure.cognitiveservices.vision.face.models.FaceAttributeType
    name: FaceAttributeType
    uid: azure.cognitiveservices.vision.face.models.FaceAttributeType
  - fullName: ']'
    name: ']'
  uid: azure.cognitiveservices.vision.face.models.FaceAttributeType]
- fullName: Callable[Bytes, response=None]
  name: Callable[Bytes, response=None]
  spec.python:
  - fullName: Callable
    name: Callable
    uid: Callable
  - fullName: '['
    name: '['
  - fullName: Bytes
    name: Bytes
    uid: Bytes
  - fullName: ', '
    name: ', '
  - fullName: response=None
    name: response=None
    uid: response=None
  - fullName: ']'
    name: ']'
  uid: Callable[Bytes, response=None]
- fullName: list[azure.cognitiveservices.vision.face.models.DetectedFace]
  name: list[DetectedFace]
  spec.python:
  - fullName: list
    name: list
    uid: list
  - fullName: '['
    name: '['
  - fullName: azure.cognitiveservices.vision.face.models.DetectedFace
    name: DetectedFace
    uid: azure.cognitiveservices.vision.face.models.DetectedFace
  - fullName: ']'
    name: ']'
  uid: list[azure.cognitiveservices.vision.face.models.DetectedFace]
- fullName: list[str]
  name: list[str]
  spec.python:
  - fullName: list
    name: list
    uid: list
  - fullName: '['
    name: '['
  - fullName: str
    name: str
    uid: str
  - fullName: ']'
    name: ']'
  uid: list[str]
- fullName: list[azure.cognitiveservices.vision.face.models.SimilarFace]
  name: list[SimilarFace]
  spec.python:
  - fullName: list
    name: list
    uid: list
  - fullName: '['
    name: '['
  - fullName: azure.cognitiveservices.vision.face.models.SimilarFace
    name: SimilarFace
    uid: azure.cognitiveservices.vision.face.models.SimilarFace
  - fullName: ']'
    name: ']'
  uid: list[azure.cognitiveservices.vision.face.models.SimilarFace]
- fullName: list[azure.cognitiveservices.vision.face.models.IdentifyResult]
  name: list[IdentifyResult]
  spec.python:
  - fullName: list
    name: list
    uid: list
  - fullName: '['
    name: '['
  - fullName: azure.cognitiveservices.vision.face.models.IdentifyResult
    name: IdentifyResult
    uid: azure.cognitiveservices.vision.face.models.IdentifyResult
  - fullName: ']'
    name: ']'
  uid: list[azure.cognitiveservices.vision.face.models.IdentifyResult]
